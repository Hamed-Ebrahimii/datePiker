### Calendar Component Documentation

This documentation explains how to use the `Calendar` component. This component can select a single date or a date range and can work with the Persian (Jalali) calendar.

---

### Using the Calendar Component

#### Importing the Component

First, import the `Calendar` component into your project:

```tsx
import Calendar from './path/to/Calendar';
```

#### Using the Component

To use this component, include it in your JSX as follows:

```tsx
<Calendar
    calendar="persian"
    enableRangeSelection={true}
    setValue={(selectedDates) => console.log(selectedDates)}
/>
```

---

### Calendar Props

This component supports several props that allow you to configure its behavior and appearance. Below is a description of each prop:

#### calendar

Specifies the type of calendar used in the component. Possible values:
- `persian`: Jalali (Persian) calendar

```tsx
<Calendar calendar="persian" />
```

#### enableRangeSelection

If `true`, enables date range selection. If `false`, only a single date can be selected.

Type: `boolean`

```tsx
<Calendar enableRangeSelection={true} />
```

#### disableOutOfRangeDays

If `true`, disables days outside the current month.

Type: `boolean`

Default: `true`

```tsx
<Calendar disableOutOfRangeDays={false} />
```

#### disablingThePreviousDay

If `true`, disables days before the current date.

Type: `boolean`

```tsx
<Calendar disablingThePreviousDay={true} />
```

#### weekStartDayIndex

Specifies the index of the day the week starts on. Possible values:
- `0`: Sunday
- `1`: Monday
- ...

Type: `number`

Default: `0`

```tsx
<Calendar weekStartDayIndex={6} />
```

#### weekDayString

An array of weekday names. You can set the names in Persian or any other language.

Type: `string[]`

```tsx
<Calendar weekDayString={["ش", "ی", "د", "س", "چ", "پ", "ج"]} />
```

#### selected

Specifies the initially selected dates. For range selection, provide an array with two dates.

Type: `DateObject[]`

```tsx
<Calendar selected={[new DateObject('2023-01-01'), new DateObject('2023-01-10')]} />
```

#### disablePastDays

If `true`, disables past days.

Type: `boolean`

```tsx
<Calendar disablePastDays={true} />
```

#### holidays

An array of holiday dates you want to display on the calendar.

Type: `DateObject[]`

```tsx
<Calendar holidays={[new DateObject('2023-03-21'), new DateObject('2023-03-22')]} />
```

#### weekendOff

If `true`, disables weekends.

Type: `boolean`

```tsx
<Calendar weekendOff={true} />
```

#### multipleChoice

If `true`, enables multiple date selection.

Type: `boolean`

```tsx
<Calendar multipleChoice={true} />
```

#### activeDayStyle

Specifies the style for active days.

Type: `string`

Default: `"w-full py-2 text-gray-800 hover:bg-green-dark hover:text-white flex items-center justify-center"`

```tsx
<Calendar activeDayStyle="bg-blue-500 text-white" />
```

#### inactiveDayStyle

Specifies the style for inactive days.

Type: `string`

Default: `"opacity-50"`

```tsx
<Calendar inactiveDayStyle="bg-gray-200" />
```

#### holidayStyle

Specifies the style for holiday days.

Type: `string`

Default: `"text-red-500"`

```tsx
<Calendar holidayStyle="bg-red-200" />
```

#### selectedDayStyle

Specifies the style for selected days.

Type: `string`

Default: `"w-full py-2 bg-green-dark text-white flex items-center justify-center"`

```tsx
<Calendar selectedDayStyle="bg-yellow-500 text-black" />
```

#### yearClassName

Specifies the CSS class for displaying the year.

Type: `string`

Default: `"text-lg font-medium text-center border border-green-dark rounded-lg py-4 text-center cursor-pointer"`

```tsx
<Calendar yearClassName="custom-year-class" />
```

#### yearStyle

Specifies the style for the year.

Type: `React.CSSProperties`

```tsx
<Calendar yearStyle={{ color: 'blue', fontWeight: 'bold' }} />
```

#### displayMonthAndYearName

If `true`, displays the month and year name.

Type: `boolean`

```tsx
<Calendar displayMonthAndYearName={true} />
```

#### dayItemSize

Specifies the size of day items.

Type: `number`

```tsx
<Calendar dayItemSize={40} />
```

#### monthYearStyle

Specifies the style for the month and year.

Type: `React.CSSProperties`

```tsx
<Calendar monthYearStyle={{ color: 'red', fontSize: '1.5em' }} />
```

#### weekDayStyle

Specifies the style for weekdays.

Type: `React.CSSProperties`

```tsx
<Calendar weekDayStyle={{ color: 'green', fontSize: '1em' }} />
```

#### setValue

A function that returns the selected dates to the parent component.

Type: `(selectedDates: DateObject[]) => void`

```tsx
<Calendar setValue={(selectedDates) => console.log(selectedDates)} />
```

#### weekdaysClassName

Specifies the CSS class for displaying the weekday names.

Type: `string`

Default: `"-rotate-90 block text-start font-tanha font-medium"`

```tsx
<Calendar weekdaysClassName="custom-weekdays-class" />
```

#### weekdaysStyle

Specifies the style for weekdays.

Type: `React.CSSProperties`

```tsx
<Calendar weekdaysStyle={{ color: 'purple', fontSize: '1em' }} />
```

#### dayStyle

Specifies the style for days.

Type: `React.CSSProperties`

```tsx
<Calendar dayStyle={{ color: 'black', fontSize: '1em' }} />
```

#### weekendOffStyle

Specifies the style for weekend off days.

Type: `string`

Default: `"text-red-500"`

```tsx
<Calendar weekendOffStyle="bg-gray-300 text-black" />
```

#### monthYearClassName

Specifies the CSS class for displaying the month and year.

Type: `string`

Default: `"text-lg font-medium text-center border border-green-dark rounded-lg py-4 cur"`

```tsx
<Calendar monthYearClassName="custom-month-year-class" />
```

---

### Summary

The `Calendar` component is a customizable calendar for selecting dates or date ranges that is compatible with the Persian (Jalali) calendar. By using various props, you can tailor the appearance and behavior of the calendar to your liking. This documentation explains all the props and how to use them. We hope this guide helps you use this component easily and effectively.